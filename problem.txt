First of all, thank you for applying to work with us, we're very excited that you decided to give it a try.

As part of our interview process, we ask you to complete a relatively simple testing exercise.
We do it in order to determine that you know how to write robust, automated tests. The goal of the exercise is to write automated tests for a web application.
The application is available here: https://mystifying-beaver-ee03b5.netlify.app/

As you can see the application displays a table with some fake data about cybersecurity attacks: name, number of cases, average impact, and complexity of the attack.

Above the table, there are 2 controls: sorting selection and filtering.
Your task is to write a set of tests that will ensure that both functionalities work correctly.
However there's a catch: you need to write your tests in such a way that if I modify the data on the website
(if I remove some rows or add new ones),
your tests will still correctly verify whether testing and filtering works correctly or not.

Here's additional information that can help you:
* capital letters are ignored by both filtering and sorting (it works as if all letters were small letters)
* sorting works only in one direction: from low to high, from A to Z, sorting by complexity sorts from low to high
* number of cases uses special formatting, thousands might be expressed as letter "k" (5000 = 5k), millions as M (1200000 = 1.2M), billions as "B" (1580000000 = 1.58B)
In order to write the tests you can use any programming language and framework of your choice as long as it is possible to run your tests in UNIX-like environment.

When evaluating your solution we will pay attention to the following things:
1. Correctness - whether your test actually validate the tested functionality
2. Robustness of the solution - how resistant is your solution to changes on the site,
for example, if I add another column between a name and number of cases, will your solution still work?
3. Code quality - how easy it is to pick up and modify your tests for other testers? Can they understand your code just by reading it?
You should send us the solution in form of 1 or more files by email or you can upload it to some hosted service like Github and send us the link.

If you have any questions, don't hesitate to ask!

Please aim to submit your work by next week Monday.